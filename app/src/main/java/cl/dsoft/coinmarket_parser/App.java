/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cl.dsoft.coinmarket_parser;



import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.*;

public class App {

    static HashMap<String, List<String>> values = new HashMap<>();
    public static void main(String[] args) throws IOException {
        int SECONDS = 120; // The delay in milliseconds
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() { // Function runs every MINUTES minutes.
                // Run the code you want here
                try {
                    App.task(); // If the function you wanted was static
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }, 0, 1000 * SECONDS);
        // 1000 milliseconds in a second * 60 per minute * the MINUTES variable.
    }

    private static void task() throws IOException {
        // JSOUP

        // Document doc = Jsoup.connect("https://coinmarketcap.com/").get();

        Document doc = Jsoup.connect("https://coinmarketcap.com/").userAgent("Mozilla").header("Cache-control", "no-cache").header("Cache-store", "no-store").timeout(4000).get();

        Elements rows = doc.select("tr");
        // int index_tr = 0;
        boolean error = false;
        for(org.jsoup.nodes.Element row :rows)
        {
            String signus = "";
            String strIndex = "";
            float ratio = 0;

            Elements columns = row.select("td");
            int index = 0;
            error = false;
            for (org.jsoup.nodes.Element column:columns)
            {
                // System.out.print(column.text() + " ");
                if (index == 1 && !column.hasText()) {
                    error = true;
                    break;
                } else if (index == 1 && column.hasText()) {
                    strIndex = column.text();

                    if (!values.containsKey(strIndex)) {
                        values.put(strIndex, new ArrayList<>());
                    }
                }

                if (!error && (index == 1 || index == 2 || index == 4)) {
                    if (index == 4) {
                        Elements spans = column.getElementsByClass("icon-Caret-down");

                        if (spans.isEmpty()) {
                            signus = "+";
                        } else {
                            signus = "-";
                        }

                        // System.out.print(signus);
                        values.get(strIndex).add(signus + column.text());

                        if (values.get(strIndex).size() > 10) {
                            // elimino primer elemento
                            values.get(strIndex).remove(0);
                        }

                        values.get(strIndex).stream().forEach(s -> System.out.print(s + " "));
                    } else {
                        // System.out.print("index: " + String.valueOf(index) + " " + column.text() + " ");
                        System.out.print(column.text() + " ");
                    }
                }

                index++;
            }
            /*
            if (!strIndex.isEmpty()) {
                // System.out.println("strIndex: " + strIndex);

                // System.out.println("first: " + values.get(strIndex).get(0));

                // System.out.println("last: " + values.get(strIndex).get(values.get(strIndex).size() - 1));

                float first = Float.parseFloat(values.get(strIndex).get(0).substring(0, values.get(strIndex).get(0).length() - 2));

                float last = Float.parseFloat(values.get(strIndex).get(values.get(strIndex).size() - 1).substring(0, values.get(strIndex).get(values.get(strIndex).size() - 1).length() - 2));

                if (first != last && values.get(strIndex).size() > 1) {
                    ratio = 100 * ((last - first) / first);
                } else {
                    ratio = 0;
                }

                System.out.println(">" + String.valueOf(ratio) + "%<");
            }

             */

            if (error) {
                break;
            }

            System.out.println();

        }


        /*

        // SELENIUM
        RemoteWebDriver driver = null;
        WebDriverWait wait;

        // SafariOptions safariOptions = new SafariOptions();
        // safariOptions.setPlatformName("MacOS Ventura");
        // safariOptions.setBrowserVersion("16.0");


        DesiredCapabilities caps = new DesiredCapabilities();
        //caps.setJavascriptEnabled(true);
        // caps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, "--webdriver-loglevel=ERROR");
        // caps.setCapability("takesScreenshot", true);

        ChromeOptions options = new ChromeOptions();
        options.addArguments("headless");
        // driver = new PhantomJSDriver(caps);
        driver = new ChromeDriver(options);

        // driver = WebDriver.(); //new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(Duration.ofMinutes(10));
        driver.get("https://coinmarketcap.com/");
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        //Navigate to Lambdatest e-commerce website
        // driver.get("https://ecommerce-playground.lambdatest.io/");

        //maximize the browser window
        //driver.manage().window().maximize();


        //wait for element to be visible and then click on it
        wait.until(webDriver -> ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete"));
        //fetch and store the reference to all products parent web element
        //nested locators 1
        WebElement table = driver.findElement(By.tagName("table"));


        //use the parent web element to fetch list of web elements for each individual product
        //nested locators 2
        List<WebElement> rows = table.findElements(By.tagName("tr"));


        //traverse the list of product web elements to scrap the required data
        for(WebElement row : rows)
        {
            boolean error = false;
            List<WebElement> columns = table.findElements(By.tagName("td"));
            int index = 0;
            for (WebElement column : columns) {
                if (index == 0 && column.getText().isEmpty()) {
                    error = true;
                    break;
                }
                if (index == 0 || index == 2 || index == 4) {
                    System.out.println(column.getText() + " ");
                }
            }
            if (error) {
                break;
            }

        }

         */

    }
}
