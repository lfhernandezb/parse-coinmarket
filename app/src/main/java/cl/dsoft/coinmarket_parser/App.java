/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cl.dsoft.coinmarket_parser;

import com.google.common.base.Predicate;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.phantomjs.PhantomJSDriver;
import org.openqa.selenium.phantomjs.PhantomJSDriverService;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
//import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
// import org.openqa.selenium.safari.SafariOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.IOException;
import java.net.URL;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class App {

    public static void main(String[] args) throws IOException {
        /*
        // JSOUP
        Document doc = Jsoup.connect("https://coinmarketcap.com/")
                .get();

        Elements rows = doc.select("tr");
        int index_tr = 0;
        for(org.jsoup.nodes.Element row :rows)
        {


            if (index_tr > 10) {
                break;
            }
            Elements columns = row.select("td");
            int index = 0;
            for (org.jsoup.nodes.Element column:columns)
            {
                index++;
                if (index == 2 || index == 3 || index == 5) {
                    System.out.print(column.text() + " ");
                }
            }
            System.out.println();

            index_tr++;
        }

         */

        // SELENIUM
        RemoteWebDriver driver = null;
        WebDriverWait wait;

        // SafariOptions safariOptions = new SafariOptions();
        // safariOptions.setPlatformName("MacOS Ventura");
        // safariOptions.setBrowserVersion("16.0");


        DesiredCapabilities caps = new DesiredCapabilities();
        //caps.setJavascriptEnabled(true);
        // caps.setCapability(PhantomJSDriverService.PHANTOMJS_CLI_ARGS, "--webdriver-loglevel=ERROR");
        // caps.setCapability("takesScreenshot", true);
        /*
        caps.setCapability(
                PhantomJSDriverService.PHANTOMJS_EXECUTABLE_PATH_PROPERTY,
                System.getProperty("user.dir") + "/bin/phantomjs"
        );

         */


        ChromeOptions options = new ChromeOptions();
        options.addArguments("headless");
        // driver = new PhantomJSDriver(caps);
        driver = new ChromeDriver(options);

        // driver = WebDriver.(); //new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(Duration.ofMinutes(10));
        driver.get("https://coinmarketcap.com/");
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        //Navigate to Lambdatest e-commerce website
        // driver.get("https://ecommerce-playground.lambdatest.io/");

        //maximize the browser window
        //driver.manage().window().maximize();


        //wait for element to be visible and then click on it
        wait.until(webDriver -> ((JavascriptExecutor) webDriver).executeScript("return document.readyState").equals("complete"));
        //fetch and store the reference to all products parent web element
        //nested locators 1
        WebElement table = driver.findElement(By.tagName("table"));


        //use the parent web element to fetch list of web elements for each individual product
        //nested locators 2
        List<WebElement> rows = table.findElements(By.tagName("tr"));


        //traverse the list of product web elements to scrap the required data
        for(WebElement row : rows)
        {
            boolean error = false;
            List<WebElement> columns = table.findElements(By.tagName("td"));
            int index = 0;
            for (WebElement column : columns) {
                if (index == 0 && column.getText().isEmpty()) {
                    error = true;
                    break;
                }
                if (index == 0 || index == 2 || index == 4) {
                    System.out.println(column.getText() + " ");
                }
            }
            if (error) {
                break;
            }

        }
    }
}
